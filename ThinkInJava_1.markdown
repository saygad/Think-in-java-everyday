#**OOP编程**#
##**抽象的进步**
 * 汇编语言是对基础机器的少量抽象
 * “命令式”语言（如FORTRAN，BASIC 和C）是对汇编语言的一种抽象。
 *  **与汇编语言相比，高级们的抽象原理要求我们着重考虑计算机的结构，而非考虑问题本身的结构**
 * **早期语言，如LISP 和APL，他们解决问题的方式是把“所有问题都归纳为列表”或“所有问题都归纳为算法”。PROLOG 则将所有问题都归纳为决策链。对于这些语言，我们认为它们一部分是面向基于“强制”的编程，另一部分则是专为处理图形符号设计的。每种方法都有自己特殊的用途，适合解决某一类的问题。但只要超出了它们力所能及的范围，就会显得非常笨拙**
 * **OOP的程序设计** 程序员利用一些工具表达问题空间内的元素。由于这种表达非常普遍，所以不必受限于特定类型的问题。将问题空间中的元素以及它们在方案空间的表示物称作“对象”（Object）。还有一些在问题空间没有对应体的其他对象。通过添加新的对象类型，程序
可进行灵活的调整，以便与特定的问题配合。所以在阅读方案的描述代码时，会读到对问题进行表达的话语。
 * OOP 允许我们根据问题来描述问题，而不是根据方案。然而，仍有一个联系途径回到计算机。每个对象都类似一台小计算机；它们有自己的状态，而且可要求它们进行特定的操作。与现实世界的“对象”或者“物体”相比，编程“对象”与它们也存在共通的地方：它们都有自己的特征和行为。
 
##**“纯粹”的面向对象程序设计方法是什么样的：**
 1. 所有东西都是对象:从要解决的问题身上提出所有概念性的组件，然后在程序中将其表达为一个对象。
 2. 程序是一大堆对象的组合
 3. 每个对象都有自己的存储空间，可容纳其他对象：通过封装现有对象，可制作出新型对象。
 4. 每个对象都是某个“类”的一个“实例”
 5. **同一类所有对象都能接收相同的消息：这一特性称为对象的“可替换性”，是OOP 最重要的概念之一。**
 